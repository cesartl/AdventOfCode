import scala.annotation.tailrec
import scala.collection.mutable
import scala.collection.mutable.{ArrayBuffer, ListBuffer}

val list = (0 to 255).toList

val small = (0 to 4).toList

def sublistReversed(list: Seq[Int], position: Int, length: Int) = {
  var result = List[Int]()
  for (i <- 0 until length) {
    result = list((position + i) % list.length) :: result
  }
  result
}


def reverse(list: Seq[Int], position: Int, length: Int) = {
  val buffer = ArrayBuffer(list: _ *)
  val reversed = sublistReversed(list, position, length)
  for (i <- 0 until length) {
    buffer((position + i) % list.length) = reversed(i)
  }
  buffer.toList
}


def twist(list: Seq[Int], start: Int, skip: Int, inputs: Seq[Int]): (Seq[Int], Int, Int) = inputs match {
  case (head :: tail) => {
    //    println("twist " + list + " start: " + start + " skip: " + skip)
    val reversed = reverse(list, start, head)
    twist(reversed, (start + head + skip) % list.length, skip + 1, tail)
  }
  case _ => (list, start, skip)
}


val cesar = "88,88,211,106,141,1,78,254,2,111,77,255,90,0,54,205".split(",").toList.map(_.toInt)

def solve(input: Seq[Int], lengths: Seq[Int]) = {
  val r = twist(input, 0, 0, lengths)
  r._1(0) * r._1(1)
}



def toAscii(s: String) = s.toCharArray.map(_.toInt).toList


@tailrec
def doRounds(list: Seq[Int], rounds: Int, inputs: Seq[Int], position: Int, skip: Int): Seq[Int] = {
  if (rounds < 1) list else {
    //    println("doing round " + rounds)
    val (twisted, newPos, newSkip) = twist(list, position, skip, inputs)
    doRounds(twisted, rounds - 1, inputs, newPos, newSkip)
  }
}

def toHex(input: Int) = {
  val hash = input.toHexString
  if (hash.length == 1) "0" + hash else hash
}

def toDenseHash(list: Seq[Int]) = list.grouped(16).map(g => g.foldLeft(0)(_ ^ _)).map(toHex).mkString("")


def knotHash(input: String, size: Int) = {
  val inputs = toAscii(input) ::: List(17, 31, 73, 47, 23)
  val rounds = doRounds((0 until size).toList, 64, inputs, 0, 0)
  toDenseHash(rounds)
}

//knotHash("88,88,211,106,141,1,78,254,2,111,77,255,90,0,54,205")
knotHash("1,2,3", 256)


// day 14


def gridState(s: String) = Range(0, 128).map(row => s + "-" + row).map(s => knotHash(s, 256)).toList


def stringTobin(s: String) = s.split("").map(c => BigInt(c, 16).toString(2).reverse.padTo(4, 0).reverse.mkString("")).mkString("")

def toBinary(l: Seq[String]) = l.map(r => stringTobin(r))


//gridState("flqrgnkx")

//.map(row => row.count(c => c == '1')).sum
def day14(s: String) = toBinary(gridState(s)).map(row => row.count(c => c == '1')).sum

//val tmp = toBinary(gridState("jxqlasbh")).map(row=> row.mkString("")).mkString("\n")
val tmp = "10110010100001010001010111101111011110111110001111110111101000110101101011000011100100101011001010100001110110110001011111010101\n10101000011000101001001010000001100111110011010010010000010010111100001100101100001001100011111100100110100000011100110100110101\n01011100011111000111101100101011010110010001110001101010010111101000010010011110111100001010000111100110001000100110110011100010\n01111100110001010001001101011011111110000110010000000110011011111111001111000000100000100011110010000010010011000111011100110000\n11100110011110100111010001001001011000011101111101101110010110010110010100110001001101011010001000011101000011101010001001011010\n10000100110100010001100101111010111011110010011000011010000000001011110010001010111111110101000000111101110010010000011110001111\n10100111001111000111111011111110111011000000011010111010100000110100100000100010000101001010101011000001110110000100000101000100\n11111110111110010100010001100100111011100010111100011000110101111010110110000101110000010111001000011001101001010000110100000011\n10011101000100110111011000111010111111010011011011001100010111011110010101001100010011110010101101110111000001110111111101011010\n01000010111111010001010010110011111111101000011011001100010010011100000000110010101001100010001100111101000011000100001011100001\n10010100001101010101110101001001101000111000101111111110100000101000010000001110111100011001011001011111111110000100011111101100\n01111101100100101011111111011101010101000011111000010101011110111011110010111000001001010010001011101101100101000011110111001110\n01010000101010011111110000100011111000000001100100101101001100011011101010011101010010101101111001110110011111010101000000101011\n01101011011000100011000110111011101100000000001011101111101110001001011100011000100111101101101101011011010001011010011000010100\n11101110111100010000111000100011000101000000001010001001010010010011110111010110011111011100100010001001100000101110000001010001\n11001000010100101101100111110111010111000110110110111011100011101011110111111101011111000001000001011111111011011111000111011111\n11111110000011101001001111100010110101000111111101010001100110110111010111001110101000101001100111001000100100001010101110010011\n01001111101001001101001111110001000010111111011011000111011010010111101111100111111000111111111111011111000010010110110110100001\n11100001110111000011101101010001010101111001111000010111010101101011100000000100010001001010101010010111100110010001110010011111\n01101010110001000001001011000001111011011000011110000011100110100100101111110110100000001100010101010101000000011101000001110010\n01000101111100101000000111101101110000011101111111101101000100100010011010011111011001010110010111100000000100111000110011111100\n01010111000111010110101000000010100010010110110001011111010000101100011110111000111100001110000111100111000000000111001100100000\n10011001010101000000011100001110001000001101110010111010110110001100110011110111001000001101000111000010001000011011011011000101\n00101111000011000110101000000100010010111110011001100100111010010100010010111000100010011011010001000010100111100001001101100011\n11110000110010101010011100110100001101001010100100110000000010011011001101111010010110111010010111101101010001110000101010011010\n11011000000101100011010010101011101111111010000001000100011000110110000000000110000111000001110001100100101010011101010100010111\n10110001100111011011001011111010000000001101101110111000110001101000101100101001010010010110011100111010000000011101011010100000\n11011111100100010001111011101001001110000100110010001110101110010111100010110000010110001000011010000011110100110101011011101010\n11010101010101110010101011001100010001010101101110010011011110000100111110111101111010010101110011011000010100100011001001101110\n11011110011100000110111101010001000101001101010001101100001001111010000110011000001111001101010000110010001011001101101000001110\n01001001111010001110101111011001110110010010000001110000110101110101010110011000000011111110110111110010111101010011100011011101\n00111000101111100111111100101001011110010011000000100000101010001110101001111110100100001001010011110110011011110101011001001110\n01101010011100111011110100111010011011010101010001011110100011100110001111111101101101000000010011011001010110101000100001010010\n01101011000100100100011111011100001101000011111011011100101111110010111001100111010110100011100110110000100111100111011011111001\n11001100010100111000111100101111010110000010000001110000110110100110111100010011101010101100100101010101001010101000000100001100\n10111000010011101011101001001010111100101001100001010001110000100010001110111011111000101111011100011010110100101101101101100001\n01101011100001110001011011101001101001001110010000011001101010011100100111011010110110011000001100111101011101001011101001011001\n10110001101001110101001010010111000101011010010001000110010100111011100000101001111101101011111110000000100100100111100011000101\n10100101101100100011111110011101000100101101000001010000101000111000011010110011111010000101001100000110011111111010110011011111\n00001000000101001000110101000000110011011000111000010010101001001001001110110010100100011100100001001000001010000101011001101010\n10001010001011101110010001011001101111011011111101111100111001110100000010111011001001001100010101000101110100000010001100101100\n01000101000001111110000010111111111011111111011001100001111100110100100110010010100111001011111110110110111000010110000101011000\n01011011011010011111010101110011000101110110111010101000010001010111001101100000100001100110100111010001001010001000110010101001\n11111001110110100100100110010001011011000111000000100111000101011001110000001110010010100110111010110011001001110100111010111001\n00011110100000101011010000101010100110001011000111101000011010101111110100011000001111010010111001000101000000111111011111101110\n10001001100110101101101011011110001011111111110000111110001111110010101000110100000111010101011001001101000111011101101100011011\n11111110111101101101010000001011101011001000100111000001011011001000001010101000001011000110001011001010001111100011000111111110\n11010110010010100101101111000100101000001011000010010101000110100110111110000111111001101001111001010101110110100111000111110010\n01110011001100010010000100110111101001000110111010011000010001000001110111000111100011101101110011110110110110000011100011011100\n01001000001011000001101001010011101110000101100001001101001111011011111000101001111100000011001001011000100011010010111100010010\n00001101000110111001100111000111100110110001010101011110100010100010011100100101110001100000010001101101010101000111001110011000\n11011001101100111010011000011110010000000000001111011110111101010000100011110011001110011111100110010111010111011101110110010110\n11000101111001110001100000011011010101111001010001100111000110010101101000110010111011110001001000001100011000011011101111011111\n01000100000101010101101000100100010010101110010111100111111111001010111111100111101111100100000111000010010110001111011001000000\n10011000011111010110101011100111010111110101101110111110000011101010000111101100101011110100100001010101000001001011011010010001\n01111111101010110101010100100111101110101010101001101110010010001111010001011000101110111011101101010001100000001001011001111011\n01011101011000000110010010001110011101001111000010010101010010100100101001000000010101011110010000111110010000011000011111001111\n11011000111011010111111010011111101000111010101110101111101100001101100111011100010100000010101100001000000111100001010110111110\n01010000110000011000001010110001111110110100110111011100100010001010000100110110101110011101101100010011110111100100010100111101\n11011101110001110111111110000001001001001010101110100100000111011110001111000011010101100110101110100000101011101000110101001100\n00000011001111110011110101100110000101101010000100001110101011001110000000101111011011111010011010100100111101101111010011010010\n01100101010010010001000100010111100000011011011110101000101010011100100010101111000101110010100010001111011010001011110100011111\n00111001000011000010010100100111111110101010010000011110011101110010111011101111010111000101100011101111110001001111100000010110\n01011000111011111010101100100110101101111010100110010100100100011111001100010000100001100110011011100010000001110010110111101010\n01101000011001000011111100101110010011111100011001010010011010001000110100110000100110101011010000111100000010111001101010010000\n11100001101110010011000100100000111010011001100010001010111000010001001011100100100100001110000101111001101010011011001010110110\n10111110000100101101000101000011001000001101101001010001110111010011100110110011111100111000000101110000010001000010000010100100\n01110001000111100100011011101111001010110110000110011110111010010101101010001110001100101101010110010000011011000000010000110000\n00001111011100011100110101000100000001010100010101100100110000000011001111111110011111010000000110011110111010011110011100110010\n10111011000000111110110011000110111000111010111100111010010110000110110010101101011101101101001000001100111011001011101110000010\n10011010000010011000001000110011100000100001011110001111110100000101010110010011010111100010000000010111111010110011011110011011\n00010001100110110001010100000010101000000001000101000010010010111010000111110000110100000001110100001011001111100001101110010111\n00111001001000001001000111101010101101100001101000010101110000010111001010110011000001000101010000000101010011001100001000000000\n01011100110111100001111001101111011110111010101100001101110000011101100000011010111000011110110001010000101111100111100110110111\n10100011010001000110010111110000111100100011011111100011110010000010001110100100011000000101101000110000100110010011101010110010\n10011010010101111111100000000011101010010110111110111100011011101111110010111101000100111000111010010111000111110111110000001010\n11001001010001101100011011011110010111010100010010111110001101110010010110010110100101101111101011111101101000101100001101000100\n10101010111100111110101010101011000111011101111001101111001010111110011001111000111111000110000011011101010111000110100101110101\n01101010101011110010000010100111100110101100100011001000110101000010011111101001110000111100011100101011010111111001000000100010\n01010011110000010010001101010000101100110101010110100000100111011000000101011100100011110011100110011001010101011110100101110100\n11011000110010101010001010100101010011000101110100110011111101011101001100000000110101001100101100001010000001110011101000111001\n11001100001101000101101110011001010010111111011001011010010111010000011111100001001100100010001110101100100110100111010100110100\n00010101000000010000101000110001110101111110110100001110101000001010110000100101110001010011011000011110101011011110001110010001\n00111010110110000100100111000111010111011100111011000000100010001010101010111011111101100110010001101011010111100000110100001100\n00011010011010000110000100101110101111001111001100001010000100011001111010110101010010010001110000011000010111101000010111010100\n00110010010110010000111101000111000110111010000101001100010100111111101111111101010100110001100000010110110000011100010011011000\n01010111101001101111001101110111001001110001010001100011011101000011000001101111111000100110100100001000011000110100001110101101\n00111000100000010000010101101111000110001010100100000010110101101111111111010110000100001010111010001000000110111101011101100101\n01000101111111001010100101111111001011101011010010001001010110001101100010010001111111111110111100101011010111001010000110101011\n10010110101000010000101101010101101000000000110010000110001110001010011000101000110010000101111010011010000010111100001100110001\n10101111111010101010011101110001001110011110011110101000111011101111111101001111011011110101010010101001010011101000010111100010\n00100111111001110101111100101111011101101010110111110100100010010001000100100101101001001100011000100001011000110011101000111000\n01010010101111000100000001110010111111000110111011010110011110101001000011000111001011100110110011011101110001010101011010111001\n11101011010100011111000100010010011010000000010010100111010100011000011000100101000010000011111011111100101110111100000011010001\n01100010010101010011001100111101101110101001011100110110111111101101000100000100000100000100111101101100110100100000011111101111\n11001100101001110000010001011110101101100111001101001110010010000111011010000011010011110100101110110101000011101100100001110000\n10011001001100100010011101001001010001101001000000011011011111111001100100000000110011110000100011000010100111011011011011000000\n00010010010000011011000010100000001011110000110101011100100110111001101100010000011011011100001000100010001001100001100110011111\n10000111001110001000110111111100010110100110011001011100100010100101011101110011100111110101011011101111000111001000001010111000\n01001110100100000010001100100011001110000110101100011111110111000010110010001000011010000010001001010100011100011100100101001100\n10110100100110100101111000011101011111000010100111000100001111001000001101100101111110000111101000111110111001100001000001101100\n11111110000000110010111111001000110010011111111011110101101111011100001001010010011111010011000101001111000111000001001111111001\n01010111010100011101010100101100000100001000000011000100111101111100001001101101100100010110010111110100110010010010110100010111\n11011100000001111010100111001000001110000000010101110000111111011011111011111000001010101100110101101000110110010010110100110111\n01101101101111010010000000010000111111111000100111000100010110011101000000101011101010011000000011001000110111110010110111100011\n01010011010110101000000010111100000110110110101010010001100111101011000100001110101100110101010010001001110110001001100011011010\n00011110101011111100001001111110111110000011110011011000110111101000000010000011100110000011011011001010010001101001101101110101\n01000000110010101011000000010100000000101110011101001100010001111101101111001000010100100011110010110100111110000011000011000001\n01101111001110101000111110010010010100110100111110001110001111000100100011001110101100010110101001011000101111000001001001001101\n01011000111000010011100011000000001111110101100101000000100000100100110000011110100110101011111001010010001011001010111101000010\n01010101001101100111010110111110111001000111001110000110100001011011111111101110010110101100101011110110100110011001111000001100\n11001010000000000011010101110111000010011111001101101100111111100101111110111001110111001000010110101111101100001000101011001010\n00110101011110010100110100011010000101111011111111110110001101110000110110010001101000101100101011001011001011000000010101100100\n00100001100110111000101011100000001111001111010010001001100011111110000011010010111010100111111111100010010101100110010001101001\n11111011010100000101011100010001001111100001001101000001011111011110100010110001011010000000100100011010010000010100000111011110\n10001001111011100000001010010000100100001011010011110111101001001011111111011010111000111100101101111110100001010111010101000001\n01101100000001101100011110101100010101100001000000110101100110100011101100001001101110001000011001101010011111001010110001011110\n10011110110011000100100011111000111110111111011110001100111000011110001110100101100010101001111001101001111101010110100000100101\n01001000000110011011010111100111001110000110101111110010001001110010111001010010111101110000000000000010100001000001010110011101\n01110111011101100110101001101111000101011111100011110011000001011111110101111111010101101001101110010110111000101111101011011110\n10001111011010011111111111011100111101111001011000001100010100101011110101110011010000111100011110001100000101000001010100111101\n00011001001101100001110101000110000001111010111010011111101101010111000111110010110100001110100000010111101010100101010010100101\n00001111110011011110001110010010011000001000111000111111101110100000111100111010111100010101001010100111110001101010110110000010\n01101011100101111011110001010110101111100111010011010111001011010101001010100011010110011001110101100011100111111110011100001000\n00000101111010001101110100111000101000110111101000011001100110011010000001100100011100111000011001100100101111110010101110010000\n11000000000011111100110011010010110101010111001111110110101111011100001100000100000001000100010011011000011101000111010101100010\n10010101111001100001101010010110111100111000010111000100011000000101001001001100010100110010101100000011001010110000011001100101\n01001111111110101110001000011110001001010010101000100100111011101011011010100001001111001100001101110001011110100001001101111100"

val grid = tmp.split("\n").toList.map(row => row.split("").toList.map(_.toInt))

grid.map(row => row.count(c => c == 1)).sum


def addOrUpdate[K, V](m: mutable.Map[K, V], k: K, kv: (K, V))(f: V => V) = {
  m.get(k) match {
    case Some(e) => m.update(k, f(e))
    case None => m += kv
  }
}

//def put(map: mutable.Map[Int, mutable.Map[Int, Int]], position: Position, value: Int) = {
//  val f = (m: mutable.Map[Int, Int]) => m.updated(position.y, value)
//  val tuple: (Int, mutable.Map[Int, Int]) = position.x -> mutable.Map(position.y -> value)
//  addOrUpdate(map, position.x, tuple)(f)
//}

//def toMap(grid : List[List[Int]]) = {
//  val map = mutable.Map[Int, mutable.Map[Int, Int]]()
//  for(i <- grid.indices){
//    for(j <- grid.indices){
//      val newRow = i -> mutable.Map(j -> grid(i)(j))
//      val f = (m: mutable.Map[Int, Int]) => m.updated(j, grid(i)(j))
//      addOrUpdate(map, i, newRow)(f)
//    }
//  }
//  map
//}

//toMap(grid)


//day14("jxqlasbh")

def adjacent(p: (Int, Int), size: Int) = List((p._1 - 1, p._2), (p._1 + 1, p._2), (p._1, p._2 - 1), (p._1, p._2 + 1)).filter(p => p._1 >= 0 && p._1 < size && p._2 >= 0 && p._2 < size)

adjacent((1, 1), 128)


grid.map(row => row.size)

def computeRegions(g: List[List[Int]]) = {
  var groups = mutable.Map[(Int, Int), Int]()
  var nextGroup = 1
  for (i <- g.indices) {
    for (j <- g.indices) {
      if (g(i)(j) == 1) {
        val adjacents = adjacent((i, j), g.size).filter(p => g(p._1)(p._2) == 1)
        val existingGroups: List[Int] = adjacents.map(c => groups.get(c)).filter(_.isDefined).map(_.get)
//        println("adding " + (i, j) + " to " + nextGroup)
        groups+=((i, j) -> nextGroup)
        if(existingGroups.nonEmpty){
          val tmp = mutable.Map[(Int, Int), Int]()
          adjacents.foreach(a => {
//            println("adding adjacent " + a +" to group " + nextGroup)
            tmp+=(a -> nextGroup)
            groups.get(a).foreach(y => {
//              println("reassigning group " + y)
              groups.filter(p => p._2 == y).foreach(x => {
//                println("reassigning  " + x._1 + " to group " + nextGroup)
                tmp += x._1 -> nextGroup
              })
            })
          })
          groups = groups ++ tmp
        }
        nextGroup += 1
      }
    }
  }
  groups
}

//1 0 1
//1 0 1
//1 1 1
val simple = List(List(1, 0, 1), List(1, 0, 1), List(1, 1, 1))

computeRegions(grid).values.toList.distinct.size

//gridState("jxqlasbh").map(_.length)


