val test = "eedadn\ndrvtee\neandsr\nraavrd\natevrs\ntsrnev\nsdttsa\nrasrtv\nnssdts\nntnada\nsvetve\ntesnvt\nvntsnd\nvrdear\ndvrsen\nenarar"
val cesar = "hgxcejbh\nxllyqcqh\nwfbuksyy\ngdfkgzny\njaswdllt\nvadfhcsm\ndhgjfpey\nphsldudv\ngqsvicsf\ndwcscmwp\nnskyvzkd\naajypkwi\npspqneoq\nxuxxotja\ndmloldlr\nszehutoh\nngyqirdf\nkvetagoj\nncyieonn\nrqlovfab\nrrctmccu\nhtpmxyac\nruibmndi\nbdknfprt\njvhdlgau\nlocicolj\nleotycqq\nhewhjckj\npfvpzxls\nwobjbaob\nyknrcnjn\niytvslou\namrrqzon\nslvukfco\nqtynzmjq\nfeehamqb\nqvfmcrue\ngsipukcv\ntwpaaett\nlacpegbj\nmzrumyhz\nqwukkyoz\nnotkeoxh\nfmhfrsxd\ntlacfjep\nkjvdjvbg\nbwayfidl\nbkswohdl\nozhxwhfr\ndjuddmzm\nocjmsazq\nlbmswjjq\nzbqyacqu\nludbuvwq\nlxbodlvj\nawznlqzd\ngfxdnhyg\naimrenku\nlpnpwquo\nzvyyphgs\nnbozurjs\nrmarpyso\nfblptqts\nebwlxqdk\nexcpawrh\nyrecdjcj\nupbsbhdn\ntdwkedjg\nfvdcambp\nfksvqfin\neizfmmsg\npstyvbho\noecxiuhk\nrtonwtsl\nkinfvfic\nkicoycji\nozqaixkp\ntphzcynp\ncqgaopux\njkczaayd\nbhsacjfc\nbugrbpkf\njshlmvtx\ntltbcihe\nxrspledr\nllciifht\nqpfstkca\njtoadgyw\nsweggqqm\nwsfrosga\nxbwgrbim\nvcjcxkba\nskpgsmih\nnurbhrvz\ndoffmusw\nmxrnpvwm\nyhrcrmun\nftrsobzx\nansgphyt\nlnorwllg\nbmvoqagr\nfgjeyahg\nhvkhjzcf\ncgqyzrzo\nmzkjeupz\nbwnsskeo\nilpzdsjz\npznjzsih\nuivlqzlr\nappuxmue\nshbvjujl\nasdiirav\nzmxqpszh\nyzjovpns\nzxvoieyc\neeyrbdma\nswkgytac\nacuntifb\nbrdscjom\nrjxefdhb\nwenjxsqa\nyutcange\nvtdhdbhs\nrqbtwivr\nsfaipzzg\nutaillto\nylptxyph\nadkckfjw\ngpgchlro\njilodzga\nbscfyvyu\nobbkxatw\njpjxbqhp\nrnyesgmb\nfvwkstan\nrbsafdzy\niffdgdjf\nexfvgkgy\nuascsncj\ndxfacgwz\ndbjgvpei\ntmpljqba\nyyzrihfj\nexmpvsnz\nwmrpykzf\ngkbutcvc\nbexeuhvc\nvfdbkxek\nopftyriv\neyxdevku\naoxzgltj\nuquxvoig\nemuquomm\nroqemvtl\nzdccsuuk\nhwgjrsdw\npnzirncg\nehhjveuy\neiikyxmd\nvysfvwum\nouqbtjsq\nzofwuilp\nikfwrsug\neonlyayj\noxjfkhpa\ncrowmesi\nojzteiqu\nkifnubpc\nkaypapxw\nmslioqke\npqmwtjjr\nywpibqfy\nwgaywazu\nzhwptdyx\nwpgadcpx\ntutllkof\naaecopiv\nzeugcyxl\nmtfhjuev\nmuagnkwh\nykagxelx\nwdziqoru\ngydoheaz\nkfuecyql\nkmrwawxf\niegbycsd\nggqzbgen\ncmyxshxs\nfjrwlydh\naqljfioq\nkcrjfwrf\npckdymrd\ndgmrwezu\nehnehwes\nllqjzgwl\nwlrtpgmz\nfxkwqfbn\nkhoxtgyd\nskannanr\nfrwceace\njvlkukvc\nkqytgmma\narmrvvbx\nvlogkabz\nrubwxaqk\nptuqzfmj\nsvcbliie\npojmduei\nilnllmpc\nkknhoqbe\nlgfbqtmk\nfyoahbgy\nvpreqyfm\ncimhwdjj\nkaedpmty\nrrzhcsve\nbjizbuge\ncvemdpoz\nchclijyf\nonxwjlxg\nmbovuyqp\nlwqswkkx\nztuwpgbo\nlsmdgxjc\nfqmgfbnu\npnbsykbb\nkmiojphc\nvtoslzrm\nljyxlohm\nvrojksuk\njsqorzaq\nfbzjpqev\nzbrqrfjw\ngkhuondt\nonesgynd\ngycikyum\nybzwzpoi\nvthldcvu\ndwjydabe\nymzkrvir\ncdpkkjwl\nsaadgstz\npdenxhxt\nuvqupdxr\ndcumeusl\nirvyjjvr\nudiwgqfb\nsnvjlntg\nsxphpbhc\ncfmknplw\noeutwhrl\nnbielpqm\nixwqbffn\ntcniaygg\nadyiictb\nweqmwrvf\nqddmzxgb\nzujfexyp\nhxugbirz\ntzaxcnxu\nimuzgivb\nqlhybxpk\nejtpcqpf\naznioyvv\nhghnzrlq\nhtgeytti\nnajifjpn\nildqsszg\nuhqqfreo\niitvmokq\nrksbwwns\nxtsahjif\nymlvkvqf\nwvvvkotu\nlzzulwtn\nfinonfjx\ntnpdotkb\nfpkmlrab\nvezyrksc\nxjqprbds\nthusmecy\nukopisob\npctjgrde\nvygxtiro\nysquoaps\nclckbexi\ndzoapzat\nhfdxhkcr\nhalnnrhk\nftbzymnt\nsurfiwgo\ngsziigch\neaataomp\ngtufatpz\nlfprtwwg\ngmzjyycz\nhcelomtr\njswycfmn\nceqswbii\nrwepuwiz\nzdbnfmlo\nniwzfzgj\nmjybffdh\nxdduqtym\nfliehvft\nxzpuhtdy\ndjxpcruf\nujxpdmlv\nabjdlrya\nbcabevnv\noigfmczk\nmjmvxizt\nyorbdfdx\ntfqigium\nqctmefwv\nihisthen\nzghlvbpo\nrxteedcs\nkxuqubfo\njgizmuiw\nzisahocr\nrohgilxu\nnqlfqwgk\njmxxghvt\nqqafryea\nnciuzjoa\nhilqglwt\nhomjiopk\noikdsxlr\npndbvsap\npdjrmebt\nxrwtknep\nggyinugw\nzgjnzxtw\niwqselka\nalloswxo\ntmkcdpvc\nmutmbsst\nxhzwhekw\nakiujnga\nyyxzwuqe\nwfpagrof\nwfthfibw\nqpjsgbwm\nucptinah\nkjdwjzwl\nukwoiojf\nwwiqkzww\nrhvwrxzy\ncxdrcpee\niqozocxr\nbxnfodiy\nctjrqbai\nngykqlsi\noyvwtxry\nqujqbfpe\noyhadvwy\nlhntcocd\npeyujuxh\nyyfpypio\nwfvkvdep\nqwfbxnvd\ngdstqqoj\nuktwzvuq\ncoegngxz\nderaggel\nvazttrwj\nlywzkjix\npwxzolvq\nmyuhmkhg\nlrevrwpu\najldvrxw\nomakmbrx\ntpqvzoat\nthghpigl\nbegsfabn\nhqzsdllv\ncrkbwfzx\nopgzqtuw\nedqwdgea\ngzzbbonl\nggpcarrh\nxvgkoazj\nkzuorpfj\niiiyqdzr\nooabacmq\nkxivhdmb\nzqatngjz\nkafggqrc\notlgcmus\ndlmfgjwu\ngueyhwmx\nidmuuxsw\nparlnjpq\nhsbxrsuw\nqrrxvlct\nqogmkdss\nsuvfnyto\nfohupzib\nnbxhnwun\nmwfzfznd\nvysajakf\nkkvqsitx\nzpmdmaxx\nkevovgav\nvevfwige\nvvwalhay\niddouupj\njcmddtsk\nasmzyujq\nuicrhvhp\nknsnqzbs\nkumbhfzi\nnhswzwkk\nprkdftfs\nvhetckmx\nhthdokgd\nvfccndkx\neskmayfo\njmhibxev\ndbyjssyr\nuxxundtr\nduhlinsd\nnhxpfezv\ncvzzkjbu\nsqffcjcq\ntpvxwcvi\nwotqrhjg\nuzkoggfj\nzdovsxos\njeinbcua\nemxeeebg\ndsoeakyp\nfpzuyofz\ncriuytns\nsotounvb\njdehwhkp\ntzzhhodg\nccxtvwcq\ndvycjmrq\nujfgtthi\njqadncvs\nqvoaxaqf\nxctriirj\njwsybfcu\nbylmuoxv\nmsraxfkc\nhexvzcmk\nmqkwtifm\nnanmatfb\nqntqnwtq\nmnmlurqh\nekwityoy\nhxlsmlav\nqqkeiiyv\nqbynezgt\nxuvcwmds\nhlqjbppb\nxroxleqr\nchnrropt\naiactdrx\nsobbngnv\ntromqcnb\njchtevxo\nnineqzst\nnubinxor\njbgazubs\nyjqpxblt\noajgxvsi\nelyvdgue\nybbursqw\ncyhlxtgt\nzkdvoshz\nhorygpna\ncnhnwkmu\nfekqjcfm\nbtqmekph\nygplicxw\nxwwvnjwz\nmpzlfuqm\nhqlalemp\njasswvyk\nuptxkysc\nzhdfxnog\npljoiili\nbyejegvv\numfkjrwf\nngeovebl\nhkdoxqkh\nmtuldmyl\nihvxsdrp\nsekthxeh\nmcykfuyy\nepjemyte\nwxwzsvoc\nczpmaoch\nwcvzmhra\nxjenhgak\nxfgntwjj\ndvhbjksi\nuvpphkal\nrrtvyuqg\nyjxpozoq\nodgcltlz\nqthfkeqz\ngnazslxp\nmawnfpil\ngurspbvf\njolfibhc\nvnajgdft\nzzdazljd\nxqvdlrvb\ntlimxoam\ncnestuvr\nsyovtpho\niejylome\nejyiuqek\nbntrmhox\nafgbkqyj\niiwfnkad\nbbplpgic\nhgumzcqn\nvvujryss\ndyikvxhg\nifedoxly\nwwixpagm\nraxqxaji\nhgphlvtu\nwyhhubup\ntfnrzzrd\npztqmdcy\nukahrffj\nrzcgyped\nlcytbxhb\nmvxcabdi\ntfafxrln\nqmmvbxah\ndjfztprn\ndgmmjtad\nrfduzoxi\nqucytfpa\nynreylbh\npqnqvsqk\ndrfeotqw\ntsdqsnnn\nwxbnqdvl\nnztxxumu\nfnvtvjda\nbvbvqnzx\ndzclzhkq\nqwbxcelx\npolupxdc\nivleqeft\nlcvlhzti\nufbmaipk\ntrggewmp\nzanmfvrp\nvqmpckuh\nnqciltkr\nmybgynmy\neigdzafh\nwgdnnxlc\nexnmuwhb\nfxjwouiw\norzqutan\nsbgbeehd\nsshcbebw\nbaqkrldu\njklbmakl\ngukrrngy\nalxrbynd\nrjicvzso\nglurpmlk\nwgcawxjb\nxypekblz\nldsksqmn\nyjuvtnif\nijprxzor\nszyhuhda\nuggdkbzx\nfkohgtnd\nyojohlwv\naszgjquf\nqnrxmqnq\nrjqealny\nrbljpiky\ngikdyumv\nupmuomdi\nvzwkawpp\nlmwhksdk\nnseonmgv\npvchhjck\nnsclplue\nkcdyrfwl\nxbkzjitp\ncdkucsgf\nmyowhqye\nbungujil\nvpukqfen\nygvejpye\nerbpwand\nkhisszwm\nsnfyeebg\nvcwyjvzd\nzxtqshmg\nmwiamqrq\njagquwfm\nxdlidnhk\nqfmxzdiw\nlnxtnlxo\nxeanphqe\nblbxavza\nxtikznke\nzwsgkjwo\nqarjtkri\nwfysfdev\nbpenwbsn\noiwvjbkl\ngoklbvfc\nitnfjgws\nmqbyswnx\ntpseqrya\nsnojvhlj\nnkshiqcm"

def parse(s: String) = s.split("\n").toVector.map(_.toVector)

def wordToMap(word: Seq[Char]): Map[Char, Int] = {
  word.foldLeft(Map(): Map[Char, Int])((map, k) => {
    map.get(k).map(count => map updated(k, count + 1)).getOrElse(map updated(k, 1))
  })
}

def solve1(s: String) = {
  val m = parse(s)
  m.transpose.map{
    col => wordToMap(col).toSeq.maxBy(_._2)._1
  }.mkString
}

def solve2(s: String) = {
  val m = parse(s)
  m.transpose.map{
    col => wordToMap(col).toSeq.minBy(_._2)._1
  }.mkString
}

solve1(cesar)
solve2(cesar)






